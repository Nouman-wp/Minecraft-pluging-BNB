<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>QuestCraft - Minecraft Quest Plugin | Play to Earn Revolution</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Minecraft:wght@400;700&family=Space+Grotesk:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');

    :root {
      --minecraft-green: #00ff00;
      --minecraft-blue: #0099ff;
      --minecraft-brown: #8B4513;
      --minecraft-gold: #ffaa00;
      --minecraft-red: #ff0000;
      --minecraft-purple: #9900ff;
      --dark-bg: #0f0f0f;
      --darker-bg: #000000;
      --card-bg: #1a1a1a;
      --border-color: #333;
      --text-secondary: #cccccc;
      --pixel-border: #555;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Press Start 2P', monospace;
      background: var(--dark-bg);
      color: #fff;
      line-height: 1.8;
      overflow-x: hidden;
      font-size: 12px;
    }

    /* Minecraft-style animated background */
    .bg-animation {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
      background: 
        linear-gradient(45deg, transparent 25%, rgba(0,255,0,0.05) 25%),
        linear-gradient(-45deg, transparent 25%, rgba(0,153,255,0.05) 25%),
        linear-gradient(45deg, transparent 75%, rgba(255,170,0,0.05) 75%),
        linear-gradient(-45deg, transparent 75%, rgba(153,0,255,0.05) 75%);
      background-size: 40px 40px;
      background-position: 0 0, 0 20px, 20px -20px, -20px 0px;
      animation: pixelMove 20s linear infinite;
    }

    .bg-animation::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: 
        repeating-linear-gradient(
          0deg,
          transparent,
          transparent 2px,
          rgba(0,255,153,0.03) 2px,
          rgba(0,255,153,0.03) 4px
        ),
        repeating-linear-gradient(
          90deg,
          transparent,
          transparent 2px,
          rgba(0,255,153,0.03) 2px,
          rgba(0,255,153,0.03) 4px
        );
    }

    @keyframes pixelMove {
      0% { background-position: 0 0, 0 20px, 20px -20px, -20px 0px; }
      100% { background-position: 40px 40px, 40px 60px, 60px 20px, 20px 40px; }
    }

    /* Minecraft-style navigation */
    nav {
      position: fixed;
      top: 0;
      width: 100%;
      z-index: 1000;
      background: rgba(15, 15, 15, 0.95);
      backdrop-filter: blur(10px);
      border-bottom: 4px solid var(--minecraft-green);
      box-shadow: 0 0 20px rgba(0, 255, 0, 0.3);
    }

    .nav-container {
      max-width: 1400px;
      margin: 0 auto;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1rem 2rem;
    }

    .logo {
      font-size: 18px;
      font-weight: 700;
      color: var(--minecraft-green);
      text-decoration: none;
      text-shadow: 
        2px 2px 0px var(--minecraft-blue),
        4px 4px 0px rgba(0,0,0,0.5);
      transition: all 0.3s ease;
    }

    .logo:hover {
      transform: scale(1.05);
      text-shadow: 
        2px 2px 0px var(--minecraft-gold),
        4px 4px 0px rgba(0,0,0,0.8);
    }

    .nav-links {
      display: flex;
      list-style: none;
      gap: 2rem;
    }

    .nav-links a {
      color: #fff;
      text-decoration: none;
      font-size: 11px;
      padding: 8px 16px;
      border: 2px solid transparent;
      transition: all 0.3s ease;
      background: linear-gradient(45deg, rgba(26,26,26,0.8), rgba(51,51,51,0.8));
    }

    .nav-links a:hover {
      color: var(--minecraft-green);
      border-color: var(--minecraft-green);
      background: linear-gradient(45deg, rgba(0,255,0,0.1), rgba(0,255,0,0.2));
      box-shadow: 0 0 15px rgba(0, 255, 0, 0.4);
    }

    /* Minecraft-style hero section */
    .hero {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      position: relative;
      padding: 0 2rem;
      background: 
        radial-gradient(circle at 20% 20%, rgba(0,255,0,0.1) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, rgba(0,153,255,0.1) 0%, transparent 50%),
        radial-gradient(circle at 50% 50%, rgba(255,170,0,0.05) 0%, transparent 70%);
    }

    .hero::before {
      content: '‚öîÔ∏è üè∞ ‚õèÔ∏è üíé üî•';
      position: absolute;
      top: 20%;
      left: 50%;
      transform: translateX(-50%);
      font-size: 2rem;
      opacity: 0.3;
      animation: floatIcons 8s ease-in-out infinite;
    }

    @keyframes floatIcons {
      0%, 100% { transform: translateX(-50%) translateY(0px) rotate(0deg); }
      25% { transform: translateX(-50%) translateY(-10px) rotate(2deg); }
      50% { transform: translateX(-50%) translateY(-5px) rotate(-1deg); }
      75% { transform: translateX(-50%) translateY(-15px) rotate(1deg); }
    }

    .hero h1 {
      font-size: clamp(24px, 6vw, 48px);
      font-weight: 700;
      background: linear-gradient(45deg, var(--minecraft-green), var(--minecraft-gold), var(--minecraft-blue));
      background-size: 200% 200%;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      animation: pixelShine 4s ease-in-out infinite;
      margin-bottom: 2rem;
      text-shadow: 4px 4px 0px rgba(0,0,0,0.8);
      letter-spacing: 2px;
    }

    @keyframes pixelShine {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    .hero p {
      font-size: clamp(10px, 2vw, 14px);
      margin-bottom: 3rem;
      color: var(--text-secondary);
      max-width: 700px;
      line-height: 2;
    }

    .hero-buttons {
      display: flex;
      gap: 2rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .btn {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 16px 24px;
      font-size: 11px;
      font-weight: 400;
      text-decoration: none;
      border: 3px solid;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
      text-transform: uppercase;
      letter-spacing: 1px;
      font-family: 'Press Start 2P', monospace;
    }

    .btn-primary {
      background: var(--minecraft-green);
      color: #000;
      border-color: #00cc00;
      box-shadow: 
        0 6px 0 #006600,
        0 6px 20px rgba(0, 255, 0, 0.4);
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 
        0 8px 0 #006600,
        0 8px 25px rgba(0, 255, 0, 0.6);
    }

    .btn-primary:active {
      transform: translateY(4px);
      box-shadow: 
        0 2px 0 #006600,
        0 2px 10px rgba(0, 255, 0, 0.4);
    }

    .btn-secondary {
      background: var(--minecraft-blue);
      color: #fff;
      border-color: #0066cc;
      box-shadow: 
        0 6px 0 #003366,
        0 6px 20px rgba(0, 153, 255, 0.4);
    }

    .btn-secondary:hover {
      transform: translateY(-2px);
      box-shadow: 
        0 8px 0 #003366,
        0 8px 25px rgba(0, 153, 255, 0.6);
    }

    .btn-secondary:active {
      transform: translateY(4px);
      box-shadow: 
        0 2px 0 #003366,
        0 2px 10px rgba(0, 153, 255, 0.4);
    }

    /* Enhanced 3D Steve Section */
    .minecraft-character {
      padding: 6rem 2rem;
      background: 
        linear-gradient(135deg, rgba(15,15,15,0.9), rgba(26,26,26,0.9)),
        url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="minecraft-pattern" width="16" height="16" patternUnits="userSpaceOnUse"><rect width="8" height="8" fill="rgba(0,255,0,0.02)"/><rect x="8" y="8" width="8" height="8" fill="rgba(0,255,0,0.02)"/></pattern></defs><rect width="100" height="100" fill="url(%23minecraft-pattern)"/></svg>');
      text-align: center;
      position: relative;
      border-top: 4px solid var(--minecraft-green);
      border-bottom: 4px solid var(--minecraft-blue);
    }

    .character-container {
      max-width: 1400px;
      margin: 0 auto;
      position: relative;
    }

    .minecraft-character h2 {
      font-size: clamp(18px, 4vw, 32px);
      margin-bottom: 1rem;
      color: var(--minecraft-gold);
      text-shadow: 3px 3px 0px rgba(0,0,0,0.8);
      letter-spacing: 2px;
    }

    .minecraft-character p {
      font-size: clamp(10px, 2vw, 12px);
      color: var(--text-secondary);
      margin-bottom: 3rem;
    }

    .scene-container {
      width: 100%;
      height: 500px;
      margin: 2rem auto;
      background: 
        linear-gradient(135deg, rgba(0,255,0,0.1), rgba(0,153,255,0.1)),
        repeating-linear-gradient(
          45deg,
          transparent,
          transparent 10px,
          rgba(255,255,255,0.02) 10px,
          rgba(255,255,255,0.02) 20px
        );
      border: 4px solid var(--minecraft-green);
      position: relative;
      overflow: hidden;
      box-shadow: 
        0 0 30px rgba(0, 255, 0, 0.3),
        inset 0 0 30px rgba(0, 255, 0, 0.1);
    }

    .scene-container::before {
      content: '';
      position: absolute;
      top: -2px;
      left: -2px;
      right: -2px;
      bottom: -2px;
      background: linear-gradient(45deg, var(--minecraft-green), var(--minecraft-blue), var(--minecraft-gold), var(--minecraft-green));
      background-size: 400% 400%;
      animation: borderGlow 3s ease-in-out infinite;
      z-index: -1;
    }

    @keyframes borderGlow {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    /* Info cards with minecraft style */
    .character-info {
      margin-top: 4rem;
    }

    .info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      gap: 2rem;
      margin-top: 2rem;
    }

    .info-item {
      display: flex;
      align-items: center;
      gap: 1.5rem;
      padding: 2rem;
      background: 
        linear-gradient(135deg, rgba(26,26,26,0.9), rgba(51,51,51,0.7)),
        repeating-linear-gradient(
          90deg,
          transparent,
          transparent 4px,
          rgba(0,255,0,0.05) 4px,
          rgba(0,255,0,0.05) 8px
        );
      border: 3px solid var(--pixel-border);
      transition: all 0.3s ease;
      position: relative;
    }

    .info-item::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent, rgba(0,255,0,0.1), transparent);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .info-item:hover {
      transform: translateY(-8px) scale(1.02);
      border-color: var(--minecraft-green);
      box-shadow: 
        0 12px 0 rgba(0,255,0,0.3),
        0 12px 30px rgba(0, 255, 0, 0.4);
    }

    .info-item:hover::before {
      opacity: 1;
    }

    .info-icon {
      font-size: 2.5rem;
      min-width: 60px;
      filter: drop-shadow(2px 2px 0px rgba(0,0,0,0.8));
    }

    .info-text {
      text-align: left;
    }

    .info-text h4 {
      font-size: 14px;
      color: var(--minecraft-gold);
      margin-bottom: 0.5rem;
      text-shadow: 2px 2px 0px rgba(0,0,0,0.8);
    }

    .info-text p {
      color: var(--text-secondary);
      margin: 0;
      font-size: 10px;
      line-height: 1.6;
    }

    /* Demo section */
    .demo {
      padding: 6rem 2rem;
      text-align: center;
      background: 
        linear-gradient(45deg, var(--dark-bg), var(--darker-bg)),
        repeating-linear-gradient(
          0deg,
          transparent,
          transparent 20px,
          rgba(0,255,0,0.03) 20px,
          rgba(0,255,0,0.03) 22px
        );
      border-top: 4px solid var(--minecraft-blue);
    }

    .demo h2 {
      font-size: clamp(18px, 4vw, 32px);
      margin-bottom: 3rem;
      color: var(--minecraft-blue);
      text-shadow: 3px 3px 0px rgba(0,0,0,0.8);
    }

    .video-container {
      position: relative;
      max-width: 900px;
      margin: 0 auto;
      border: 4px solid var(--minecraft-blue);
      overflow: hidden;
      box-shadow: 
        0 0 40px rgba(0, 153, 255, 0.4),
        0 20px 0 rgba(0, 100, 200, 0.3);
    }

    .video-placeholder {
      width: 100%;
      height: 500px;
      background: 
        linear-gradient(135deg, rgba(0, 153, 255, 0.2), rgba(0, 255, 0, 0.2)),
        repeating-linear-gradient(
          45deg,
          transparent,
          transparent 20px,
          rgba(255, 255, 255, 0.05) 20px,
          rgba(255, 255, 255, 0.05) 40px
        );
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      color: var(--minecraft-blue);
      font-size: 16px;
      text-shadow: 2px 2px 0px rgba(0,0,0,0.8);
    }

    .video-placeholder::before {
      content: '‚ñ∂Ô∏è';
      font-size: 4rem;
      margin-bottom: 1rem;
      animation: pulse 2s ease-in-out infinite;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.1); }
    }

    /* Features section */
    .features {
      padding: 6rem 2rem;
      background: 
        linear-gradient(135deg, rgba(26,26,26,0.9), rgba(15,15,15,0.9)),
        url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 60 60"><defs><pattern id="feature-pattern" width="30" height="30" patternUnits="userSpaceOnUse"><rect width="15" height="15" fill="rgba(255,170,0,0.03)"/><rect x="15" y="15" width="15" height="15" fill="rgba(255,170,0,0.03)"/></pattern></defs><rect width="60" height="60" fill="url(%23feature-pattern)"/></svg>');
      border-top: 4px solid var(--minecraft-gold);
    }

    .features h2 {
      font-size: clamp(18px, 4vw, 32px);
      text-align: center;
      margin-bottom: 4rem;
      color: var(--minecraft-gold);
      text-shadow: 3px 3px 0px rgba(0,0,0,0.8);
    }

    .features-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      gap: 2rem;
      max-width: 1400px;
      margin: 0 auto;
    }

    .feature-card {
      background: 
        linear-gradient(135deg, rgba(26,26,26,0.9), rgba(51,51,51,0.7)),
        repeating-linear-gradient(
          45deg,
          transparent,
          transparent 8px,
          rgba(255,170,0,0.05) 8px,
          rgba(255,170,0,0.05) 16px
        );
      padding: 3rem;
      border: 3px solid var(--pixel-border);
      transition: all 0.4s ease;
      position: relative;
      overflow: hidden;
    }

    .feature-card::before {
      content: '';
      position: absolute;
      top: -100%;
      left: -100%;
      width: 300%;
      height: 300%;
      background: radial-gradient(circle, rgba(255,170,0,0.1) 0%, transparent 70%);
      transition: all 0.6s ease;
      transform: scale(0);
    }

    .feature-card:hover::before {
      transform: scale(1);
      top: -50%;
      left: -50%;
    }

    .feature-card:hover {
      transform: translateY(-12px) rotateX(5deg);
      border-color: var(--minecraft-gold);
      box-shadow: 
        0 15px 0 rgba(255,170,0,0.3),
        0 15px 40px rgba(255, 170, 0, 0.4);
    }

    .feature-icon {
      font-size: 3.5rem;
      margin-bottom: 1.5rem;
      display: block;
      filter: drop-shadow(3px 3px 0px rgba(0,0,0,0.8));
    }

    .feature-card h3 {
      font-size: 16px;
      margin-bottom: 1.5rem;
      color: var(--minecraft-gold);
      text-shadow: 2px 2px 0px rgba(0,0,0,0.8);
    }

    .feature-card p {
      font-size: 10px;
      line-height: 1.8;
      color: var(--text-secondary);
    }

    /* Tech stack */
    .tech-stack {
      padding: 6rem 2rem;
      text-align: center;
      background: 
        linear-gradient(45deg, var(--darker-bg), var(--dark-bg)),
        repeating-linear-gradient(
          90deg,
          transparent,
          transparent 16px,
          rgba(153,0,255,0.03) 16px,
          rgba(153,0,255,0.03) 18px
        );
      border-top: 4px solid var(--minecraft-purple);
    }

    .tech-stack h2 {
      font-size: clamp(18px, 4vw, 32px);
      margin-bottom: 3rem;
      color: var(--minecraft-purple);
      text-shadow: 3px 3px 0px rgba(0,0,0,0.8);
    }

    .tech-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 2rem;
      max-width: 1200px;
      margin: 0 auto;
    }

    .tech-item {
      padding: 2rem;
      background: 
        linear-gradient(135deg, rgba(26,26,26,0.9), rgba(51,51,51,0.7)),
        repeating-linear-gradient(
          135deg,
          transparent,
          transparent 6px,
          rgba(153,0,255,0.05) 6px,
          rgba(153,0,255,0.05) 12px
        );
      border: 3px solid var(--pixel-border);
      transition: all 0.3s ease;
      position: relative;
    }

    .tech-item:hover {
      transform: scale(1.08) rotateZ(2deg);
      border-color: var(--minecraft-purple);
      box-shadow: 
        0 10px 0 rgba(153,0,255,0.3),
        0 10px 30px rgba(153, 0, 255, 0.4);
    }

    .tech-item span {
      font-size: 2.5rem;
      display: block;
      margin-bottom: 1rem;
      filter: drop-shadow(2px 2px 0px rgba(0,0,0,0.8));
    }

    .tech-item div {
      font-size: 10px;
      color: var(--minecraft-purple);
      text-shadow: 1px 1px 0px rgba(0,0,0,0.8);
    }

    /* Footer */
    footer {
      background: var(--darker-bg);
      padding: 4rem 2rem 2rem;
      text-align: center;
      border-top: 4px solid var(--minecraft-green);
      position: relative;
    }

    footer::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, var(--minecraft-green), var(--minecraft-blue), var(--minecraft-gold), var(--minecraft-purple));
      background-size: 400% 100%;
      animation: footerGlow 4s ease-in-out infinite;
    }

    @keyframes footerGlow {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    .footer-content {
      max-width: 1400px;
      margin: 0 auto;
    }

    .footer-links {
      display: flex;
      justify-content: center;
      gap: 3rem;
      margin-bottom: 3rem;
      flex-wrap: wrap;
    }

    .footer-links a {
      color: var(--text-secondary);
      text-decoration: none;
      font-size: 10px;
      padding: 8px 16px;
      border: 2px solid transparent;
      transition: all 0.3s ease;
    }

    .footer-links a:hover {
      color: var(--minecraft-green);
      border-color: var(--minecraft-green);
      box-shadow: 0 0 15px rgba(0, 255, 0, 0.4);
    }

    .footer-bottom {
      color: var(--text-secondary);
      font-size: 9px;
      line-height: 1.8;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .nav-links {
        display: none;
      }
      
      .hero-buttons {
        flex-direction: column;
        align-items: center;
      }
      
      .btn {
        width: 100%;
        max-width: 280px;
      }

      .features-grid {
        grid-template-columns: 1fr;
      }

      .info-grid {
        grid-template-columns: 1fr;
      }
    }

    /* Loading animation */
    .loading {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--darker-bg);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      z-index: 9999;
      transition: opacity 0.5s ease;
    }

    .loading.hidden {
      opacity: 0;
      pointer-events: none;
    }

    .loader {
      width: 60px;
      height: 60px;
      background: var(--minecraft-green);
      position: relative;
      animation: pixelSpin 1.5s ease-in-out infinite;
      box-shadow: 0 0 20px rgba(0, 255, 0, 0.5);
    }

    .loader::before {
      content: '‚õèÔ∏è';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 24px;
      animation: pickaxeRotate 1.5s ease-in-out infinite reverse;
    }

    @keyframes pixelSpin {
      0%, 100% { transform: rotate(0deg) scale(1); }
      25% { transform: rotate(90deg) scale(1.1); }
      50% { transform: rotate(180deg) scale(1); }
      75% { transform: rotate(270deg) scale(1.1); }
    }

    @keyframes pickaxeRotate {
      0%, 100% { transform: translate(-50%, -50%) rotate(0deg); }
      50% { transform: translate(-50%, -50%) rotate(180deg); }
    }

    .loading-text {
      margin-top: 2rem;
      font-size: 12px;
      color: var(--minecraft-green);
      text-shadow: 2px 2px 0px rgba(0,0,0,0.8);
    }

    /* Interactive cursor */
    .cursor-trail {
      position: fixed;
      width: 4px;
      height: 4px;
      background: var(--minecraft-green);
      pointer-events: none;
      z-index: 9998;
      box-shadow: 0 0 10px var(--minecraft-green);
      animation: cursorPulse 1s ease-in-out infinite;
    }

    @keyframes cursorPulse {
      0%, 100% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.5); opacity: 0.5; }
    }
  </style>
</head>

<body>
  <!-- Loading Screen -->
  <div class="loading" id="loading">
    <div class="loader"></div>
    <div class="loading-text">LOADING MINECRAFT WORLD...</div>
  </div>

  <!-- Animated Background -->
  <div class="bg-animation"></div>

  <!-- Navigation -->
  <nav id="navbar">
    <div class="nav-container">
      <a href="#" class="logo">‚õèÔ∏è QUESTCRAFT</a>
      <ul class="nav-links">
        <li><a href="#home">HOME</a></li>
        <li><a href="#character">STEVE</a></li>
        <li><a href="#demo">DEMO</a></li>
        <li><a href="#features">FEATURES</a></li>
        <li><a href="#tech">TECH</a></li>
      </ul>
    </div>
  </nav>

  <!-- Hero Section -->
  <section class="hero" id="home">
    <h1>MINECRAFT QUEST PLUGIN</h1>
    <p>
      AI-GENERATED ADVENTURES ‚Ä¢ NFT REWARDS ‚Ä¢ BLOCKCHAIN REVOLUTION<br>
      TRANSFORM YOUR MINECRAFT EXPERIENCE WITH CUTTING-EDGE TECHNOLOGY
    </p>
    <div class="hero-buttons">
      <a href="#demo" class="btn btn-primary">
        ‚¨áÔ∏è DOWNLOAD PLUGIN
      </a>
      <a href="https://github.com/Nouman-wp/Minecraft-pluging-BNB" class="btn btn-secondary">
        üéÆ View on github
      </a>
    </div>
  </section>

  <!-- Enhanced 3D Minecraft Character Section -->
  <section class="minecraft-character" id="character">
    <div class="character-container">
      <h2>üéÆ MEET STEVE - YOUR AI COMPANION</h2>
      <p>Interactive 3D Minecraft Steve that follows your mouse and reacts to your presence!</p>
      
      <!-- 3D Scene Container -->
      <div class="scene-container" id="steveScene">
        <canvas id="steveCanvas"></canvas>
      </div>

      <!-- Character Info Grid -->
      <div class="character-info">
        <div class="info-grid">
          <div class="info-item">
            <div class="info-icon">ü§ñ</div>
            <div class="info-text">
              <h4>AI-POWERED</h4>
              <p>Steve uses advanced AI to understand your gameplay patterns and create personalized quests that match your style and skill level.</p>
            </div>
          </div>
          
          <div class="info-item">
            <div class="info-icon">‚öîÔ∏è</div>
            <div class="info-text">
              <h4>DYNAMIC QUESTS</h4>
              <p>Generate unlimited adventures with procedural quest creation, from simple gathering missions to epic dungeon raids.</p>
            </div>
          </div>
          
          <div class="info-item">
            <div class="info-icon">üíé</div>
            <div class="info-text">
              <h4>NFT REWARDS</h4>
              <p>Earn unique blockchain-based rewards for completing quests. Trade, sell, or showcase your achievements across platforms.</p>
            </div>
          </div>
          
          <div class="info-item">
            <div class="info-icon">üè∞</div>
            <div class="info-text">
              <h4>WORLD BUILDER</h4>
              <p>Steve can automatically generate custom structures, dungeons, and landscapes based on your quest requirements.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Demo Section -->
  <section class="demo" id="demo">
    <h2>üé¨ PLUGIN IN ACTION</h2>
    <div class="video-container">
      <div class="video-placeholder">
        EPIC GAMEPLAY TRAILER
        <div style="margin-top: 1rem; font-size: 12px;">
          Watch how QuestCraft transforms your Minecraft experience
        </div>
      </div>
    </div>
  </section>

  <!-- Features Section -->
  <section class="features" id="features">
    <h2>‚ö° REVOLUTIONARY FEATURES</h2>
    <div class="features-grid">
      <div class="feature-card">
        <span class="feature-icon">üß†</span>
        <h3>SMART AI QUEST GENERATOR</h3>
        <p>Advanced machine learning algorithms analyze your gameplay to create perfectly balanced quests. No two adventures are ever the same, ensuring endless replayability and constant excitement.</p>
      </div>
      
      <div class="feature-card">
        <span class="feature-icon">üí∞</span>
        <h3>PLAY-TO-EARN ECONOMY</h3>
        <p>Revolutionary blockchain integration lets you earn real value from your Minecraft adventures. Complete quests, earn tokens, trade NFTs, and build your digital wealth while having fun.</p>
      </div>
      
      <div class="feature-card">
        <span class="feature-icon">üåç</span>
        <h3>PROCEDURAL WORLD GEN</h3>
        <p>Infinite worlds tailored to your quests. Our AI creates unique biomes, structures, and landscapes that perfectly match your adventure requirements, making every journey feel epic.</p>
      </div>
      
      <div class="feature-card">
        <span class="feature-icon">üë•</span>
        <h3>MULTIPLAYER CAMPAIGNS</h3>
        <p>Team up with friends for massive cooperative campaigns. Share rewards, compete in leaderboards, and participate in server-wide events that bring the community together.</p>
      </div>
      
      <div class="feature-card">
        <span class="feature-icon">üé®</span>
        <h3>CUSTOM SKIN REWARDS</h3>
        <p>Unlock exclusive character skins, tools, and cosmetics as NFT rewards. Show off your achievements with rare items that prove your legendary status in the QuestCraft universe.</p>
      </div>
      
      <div class="feature-card">
        <span class="feature-icon">üìä</span>
        <h3>ANALYTICS DASHBOARD</h3>
        <p>Track your progress with detailed statistics, achievement galleries, and performance metrics. See how you stack up against other players and optimize your gameplay strategy.</p>
      </div>
    </div>
  </section>

  <!-- Tech Stack Section -->
  <section class="tech-stack" id="tech">
    <h2>üîß POWERED BY CUTTING-EDGE TECH</h2>
    <div class="tech-grid">
      <div class="tech-item">
        <span>‚òï</span>
        <div>JAVA / SPIGOT</div>
      </div>
      <div class="tech-item">
        <span>üß†</span>
        <div> AI</div>
      </div>
      <div class="tech-item">
        <span>‚õìÔ∏è</span>
        <div>BNB BLOCKCHAIN</div>
      </div>
      <div class="tech-item">
        <span>üóÑÔ∏è</span>
        <div>MONGODB</div>
      </div>
      <div class="tech-item">
        <span>üöÄ</span>
        <div>NODE.JS </div>
      </div>
      <div class="tech-item">
        <span>üåê</span>
        <div>WEB3 INTEGRATION</div>
      </div>
      <!-- <div class="tech-item">
        <span>‚òÅÔ∏è</span>
        <div>AWS CLOUD</div>
      </div> -->
      <div class="tech-item">
        <span>üîí</span>
        <div>SMART CONTRACTS</div>
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer>
    <div class="footer-content">
      <div class="footer-links">
        <a href="#download">DOWNLOAD</a>
        <a href="#docs">DOCUMENTATION</a>
        <a href="#community">COMMUNITY</a>
        <a href="#support">SUPPORT</a>
        <a href="#roadmap">ROADMAP</a>
      </div>
      <div class="footer-bottom">
        <p>¬© 2025 QUESTCRAFT. ALL RIGHTS RESERVED.</p>
        <p>REVOLUTIONIZING MINECRAFT GAMING WITH AI & BLOCKCHAIN TECHNOLOGY</p>
      </div>
    </div>
  </footer>

  <script>
    // Enhanced 3D Steve Implementation
    let scene, camera, renderer, steve, mouse, clock;
    let steveGroup;
    let isMouseOver = false;
    let targetRotationX = 0;
    let targetRotationY = 0;
    let currentRotationX = 0;
    let currentRotationY = 0;

    function initSteve() {
      const container = document.getElementById('steveScene');
      const canvas = document.getElementById('steveCanvas');
      
      // Scene setup
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0x0f0f0f);
      
      // Camera
      camera = new THREE.PerspectiveCamera(75, container.offsetWidth / container.offsetHeight, 0.1, 1000);
      camera.position.z = 8;
      camera.position.y = 2;
      
      // Renderer
      renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true });
      renderer.setSize(container.offsetWidth, container.offsetHeight);
      renderer.shadowMap.enabled = true;
      renderer.shadowMap.type = THREE.PCFSoftShadowMap;
      
      // Lighting
      const ambientLight = new THREE.AmbientLight(0x404040, 0.6);
      scene.add(ambientLight);
      
      const directionalLight = new THREE.DirectionalLight(0x00ff00, 0.8);
      directionalLight.position.set(5, 10, 5);
      directionalLight.castShadow = true;
      directionalLight.shadow.mapSize.width = 2048;
      directionalLight.shadow.mapSize.height = 2048;
      scene.add(directionalLight);
      
      const pointLight = new THREE.PointLight(0x0099ff, 0.5, 50);
      pointLight.position.set(-5, 5, 5);
      scene.add(pointLight);
      
      // Create Steve Group
      steveGroup = new THREE.Group();
      
      // Steve's body parts with Minecraft-style textures
      const headGeometry = new THREE.BoxGeometry(2, 2, 2);
      const bodyGeometry = new THREE.BoxGeometry(1.5, 3, 1);
      const armGeometry = new THREE.BoxGeometry(0.8, 2.5, 0.8);
      const legGeometry = new THREE.BoxGeometry(0.8, 3, 0.8);
      
      // Materials with Minecraft colors
      const headMaterial = new THREE.MeshLambertMaterial({ 
        color: 0xfdbcb4,
        map: createPixelTexture(0xfdbcb4, 0x8b4513) // Skin with hair
      });
      const bodyMaterial = new THREE.MeshLambertMaterial({ 
        color: 0x3c5aa6,
        map: createPixelTexture(0x3c5aa6, 0x2c4486) // Blue shirt
      });
      const armMaterial = new THREE.MeshLambertMaterial({ 
        color: 0xfdbcb4,
        map: createPixelTexture(0xfdbcb4, 0x3c5aa6) // Skin with sleeve
      });
      const legMaterial = new THREE.MeshLambertMaterial({ 
        color: 0x2c4486,
        map: createPixelTexture(0x2c4486, 0x1a2a5a) // Dark blue pants
      });
      
      // Create body parts
      const head = new THREE.Mesh(headGeometry, headMaterial);
      head.position.y = 4;
      head.castShadow = true;
      steveGroup.add(head);
      
      const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
      body.position.y = 1.5;
      body.castShadow = true;
      steveGroup.add(body);
      
      const leftArm = new THREE.Mesh(armGeometry, armMaterial);
      leftArm.position.set(-1.2, 2, 0);
      leftArm.castShadow = true;
      steveGroup.add(leftArm);
      
      const rightArm = new THREE.Mesh(armGeometry, armMaterial);
      rightArm.position.set(1.2, 2, 0);
      rightArm.castShadow = true;
      steveGroup.add(rightArm);
      
      const leftLeg = new THREE.Mesh(legGeometry, legMaterial);
      leftLeg.position.set(-0.4, -1.5, 0);
      leftLeg.castShadow = true;
      steveGroup.add(leftLeg);
      
      const rightLeg = new THREE.Mesh(legGeometry, legMaterial);
      rightLeg.position.set(0.4, -1.5, 0);
      rightLeg.castShadow = true;
      steveGroup.add(rightLeg);
      
      // Add pickaxe
      const pickaxeGroup = createPickaxe();
      pickaxeGroup.position.set(1.8, 2.5, 0);
      pickaxeGroup.rotation.z = -Math.PI / 4;
      steveGroup.add(pickaxeGroup);
      
      // Store references to body parts for animation
      steveGroup.head = head;
      steveGroup.leftArm = leftArm;
      steveGroup.rightArm = rightArm;
      steveGroup.leftLeg = leftLeg;
      steveGroup.rightLeg = rightLeg;
      steveGroup.pickaxe = pickaxeGroup;
      
      scene.add(steveGroup);
      
      // Add ground plane
      const groundGeometry = new THREE.PlaneGeometry(20, 20);
      const groundMaterial = new THREE.MeshLambertMaterial({ 
        color: 0x2a5a2a,
      });
      const ground = new THREE.Mesh(groundGeometry, groundMaterial);
      ground.rotation.x = -Math.PI / 2;
      ground.position.y = -4;
      ground.receiveShadow = true;
      scene.add(ground);
      
      // Add floating Minecraft blocks
      createFloatingBlocks();
      
      // Mouse tracking
      mouse = new THREE.Vector2();
      container.addEventListener('mousemove', onMouseMove);
      container.addEventListener('mouseenter', () => isMouseOver = true);
      container.addEventListener('mouseleave', () => isMouseOver = false);
      
      // Clock for animations
      clock = new THREE.Clock();
      
      // Start animation loop
      animateSteve();
      
      // Handle window resize
      window.addEventListener('resize', onWindowResize);
    }
    
    function createPixelTexture(color1, color2) {
      const canvas = document.createElement('canvas');
      canvas.width = 16;
      canvas.height = 16;
      const ctx = canvas.getContext('2d');
      
      // Create pixelated pattern
      const pixels = [
        [1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1],
        [1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1],
        [1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1],
        [1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1],
        [2,2,2,2,1,1,2,2,1,1,2,2,2,2,1,1],
        [2,2,2,1,1,1,1,2,1,1,1,1,2,2,2,1],
        [2,2,2,2,1,1,2,2,1,1,2,2,2,2,2,1],
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],
        [1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1],
        [1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1],
        [1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1],
        [1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,1],
        [1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1],
        [1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1],
        [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
      ];
      
      pixels.forEach((row, y) => {
        row.forEach((pixel, x) => {
          ctx.fillStyle = pixel === 1 ? `#${color1.toString(16).padStart(6, '0')}` : `#${color2.toString(16).padStart(6, '0')}`;
          ctx.fillRect(x, y, 1, 1);
        });
      });
      
      const texture = new THREE.CanvasTexture(canvas);
      texture.magFilter = THREE.NearestFilter;
      texture.minFilter = THREE.NearestFilter;
      return texture;
    }
    
    function createPickaxe() {
      const pickaxeGroup = new THREE.Group();
      
      // Handle
      const handleGeometry = new THREE.BoxGeometry(0.2, 2, 0.2);
      const handleMaterial = new THREE.MeshLambertMaterial({ color: 0x8b4513 });
      const handle = new THREE.Mesh(handleGeometry, handleMaterial);
      pickaxeGroup.add(handle);
      
      // Pickaxe head
      const headGeometry = new THREE.BoxGeometry(1.2, 0.4, 0.2);
      const headMaterial = new THREE.MeshLambertMaterial({ color: 0x666666 });
      const head = new THREE.Mesh(headGeometry, headMaterial);
      head.position.y = 1;
      pickaxeGroup.add(head);
      
      return pickaxeGroup;
    }
    
    function createFloatingBlocks() {
      const blockGeometry = new THREE.BoxGeometry(1, 1, 1);
      const materials = [
        new THREE.MeshLambertMaterial({ color: 0x8b4513 }), // Dirt
        new THREE.MeshLambertMaterial({ color: 0x666666 }), // Stone
        new THREE.MeshLambertMaterial({ color: 0x00ff00 }), // Emerald
        new THREE.MeshLambertMaterial({ color: 0x0099ff }), // Diamond
      ];
      
      for (let i = 0; i < 8; i++) {
        const block = new THREE.Mesh(blockGeometry, materials[Math.floor(Math.random() * materials.length)]);
        block.position.x = (Math.random() - 0.5) * 20;
        block.position.y = Math.random() * 10 + 5;
        block.position.z = (Math.random() - 0.5) * 10;
        block.rotation.x = Math.random() * Math.PI;
        block.rotation.y = Math.random() * Math.PI;
        block.rotation.z = Math.random() * Math.PI;
        block.castShadow = true;
        scene.add(block);
        
        // Store for animation
        block.originalY = block.position.y;
        block.floatSpeed = 0.5 + Math.random() * 0.5;
      }
    }
    
    function onMouseMove(event) {
      const container = document.getElementById('steveScene');
      const rect = container.getBoundingClientRect();
      mouse.x = ((event.clientX - rect.left) / container.offsetWidth) * 2 - 1;
      mouse.y = -((event.clientY - rect.top) / container.offsetHeight) * 2 + 1;
      
      // Calculate target rotations based on mouse position
      targetRotationY = mouse.x * 0.5;
      targetRotationX = mouse.y * 0.3;
    }
    
    function animateSteve() {
      requestAnimationFrame(animateSteve);
      
      const time = clock.getElapsedTime();
      
      if (steveGroup) {
        // Smooth mouse following
        currentRotationX += (targetRotationX - currentRotationX) * 0.05;
        currentRotationY += (targetRotationY - currentRotationY) * 0.05;
        
        steveGroup.rotation.y = currentRotationY;
        steveGroup.head.rotation.x = currentRotationX;
        
        // Idle animations
        steveGroup.position.y = Math.sin(time * 0.5) * 0.2;
        steveGroup.leftArm.rotation.z = Math.sin(time * 2) * 0.1 + 0.1;
        steveGroup.rightArm.rotation.z = Math.sin(time * 2 + Math.PI) * 0.1 - 0.1;
        
        // Enhanced mouse interaction
        if (isMouseOver) {
          steveGroup.scale.set(1.1, 1.1, 1.1);
          steveGroup.leftArm.rotation.x = Math.sin(time * 4) * 0.3;
          steveGroup.rightArm.rotation.x = Math.sin(time * 4 + Math.PI) * 0.3;
          steveGroup.pickaxe.rotation.z = -Math.PI / 4 + Math.sin(time * 6) * 0.2;
        } else {
          steveGroup.scale.set(1, 1, 1);
          steveGroup.leftArm.rotation.x = 0;
          steveGroup.rightArm.rotation.x = 0;
          steveGroup.pickaxe.rotation.z = -Math.PI / 4;
        }
      }
      
      // Animate floating blocks
      scene.children.forEach(child => {
        if (child.originalY !== undefined) {
          child.position.y = child.originalY + Math.sin(time * child.floatSpeed) * 2;
          child.rotation.x += 0.01;
          child.rotation.y += 0.02;
        }
      });
      
      renderer.render(scene, camera);
    }
    
    function onWindowResize() {
      const container = document.getElementById('steveScene');
      camera.aspect = container.offsetWidth / container.offsetHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.offsetWidth, container.offsetHeight);
    }
    
    // Cursor trail effect
    function createCursorTrail() {
      const trails = [];
      const maxTrails = 20;
      
      document.addEventListener('mousemove', (e) => {
        const trail = document.createElement('div');
        trail.className = 'cursor-trail';
        trail.style.left = e.clientX + 'px';
        trail.style.top = e.clientY + 'px';
        document.body.appendChild(trail);
        
        trails.push(trail);
        
        if (trails.length > maxTrails) {
          const oldTrail = trails.shift();
          oldTrail.remove();
        }
        
        setTimeout(() => {
          trail.style.opacity = '0';
          setTimeout(() => {
            if (trail.parentNode) {
              trail.remove();
            }
          }, 300);
        }, 100);
      });
    }
    
    // Smooth scrolling for navigation
    function initSmoothScrolling() {
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });
    }
    
    // Loading screen
    function hideLoading() {
      const loading = document.getElementById('loading');
      setTimeout(() => {
        loading.classList.add('hidden');
      }, 2000);
    }
    
    // Initialize everything when page loads
    document.addEventListener('DOMContentLoaded', () => {
      hideLoading();
      initSteve();
      createCursorTrail();
      initSmoothScrolling();
      
      // Add some interactive sound effects (visual feedback)
      document.querySelectorAll('.btn, .feature-card, .tech-item').forEach(el => {
        el.addEventListener('mouseenter', () => {
          el.style.transform = el.style.transform.replace('scale(1)', 'scale(1.05)');
        });
      });
    });
  </script>
</body>
</html>